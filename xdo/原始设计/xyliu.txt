总体要求：先、快、界面配置、包含一些新的东西、适应需求变更、web


总体需求：
先、快、便、新、变

核心矛盾点分析：
影响项目开发的问题有以下方面决定：
1、需求变化带来了，程序修改、修改后即需要全量的测试
2、框架的坑，不管是配置上的，还是使用时注意点都会成为开发时一次又一次遇到的问题，很多问题基本上无法避免，比如mvc需要拷贝修改的文件到指定文件夹，每次部署均会趟这个
3、底层工具的坑、比如eclipse的使用、maven的使用、还有数据库脚本管理等的坑，这些对使用者有非常多的要求,操作系统问题等等
4、流程的坑、研发-》测试-》部署-》业务上线  环节太多，技术使用细节过多，每一步都会花费大量时间，也会出现很多问题。
5、交流的问题，需求、研发、测试的理解如何达成一致也是很大的问题
6、框架升级的坑，框架升级是必要的，每次升级产品的风险太高，耗时耗力，即使是小版本更新都容易出问题，大版本升级必出问题


1、IOM概念，将常用的意图均定义出来，
2、生成代码和扩展代码的完全分离（前端和后端均这样）
3、生成的引擎采用模板化方式，即可采用不同的模板生成不同的代码，但扩展代码可以不变
4、生成代码和部署均自动化，采用容器方式
5、开发环境即生产环境，生成后直接对外使用
6、完全前后端分离，IOC方式实现，对于后端没有的方法和接口，前端直接定义返回值，后端实现后即切换回去
7、前端的模板需要实现多端（pcweb、mobile、pad、小程序）
8、编辑的可见即所得
9、支持项目级扩展封装功能，意图的形成过程  项目级封装->意图
10、减小测试量，测试只需要测试扩展代码和，扩展的界面操作
11、流程上自动实现灰度发布和版本管理
12、自动生成单元测试
13、解决数据库schema依赖问题、数据库自动初始化、数据库智能导入数据、增加数据库脚本管理工具

核心思想
1、需求配置的意图越多越好，程序员的代码越少越好，需要测试的点就少
2、意图是能修改的，支持可变的，自动代码和扩展代码完全分开
3、缩减开发、测试、部署中的环节，做到开发完及部署好，快速初始化数据
4、框架升级做到单元测试全覆盖，不采用传统测试
